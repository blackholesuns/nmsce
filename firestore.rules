rules_version = '2'

service cloud.firestore {
  match /databases/{database}/documents {
     match /{document=**} {
      allow read, write: if false
  	}

		match /admin/{user} {
      allow read: if isUser(request, user)
      allow write: if hasRole(database, request, ["owner"])
    }

		match /admin/state {
      allow read: if true
    }

		match /bhs/{document=**} {
      allow read: if true
    }

		match /bhs/pageTotals {
      allow read, write: if true
    }
    
	  match /bhs/patreon/contributors/{user} {
      allow read: if isUser(request, user)
    }

		match /nmsce-searches/{document} {
      allow read, write: if true
    }

    match /contest/{document=**} {
      allow read: if isLoggedIn(request)
      allow write: if hasRole(database, request, ["admin"])
    }

    match /stars5/{document=**} {
      allow read: if true
      allow create: if isLoggedIn(request)
      allow update: if isOwner(request, resource) || checkFieldsBHS(request, resource) || isAdmin(database, request)
      allow delete: if isOwner(request, resource) || isAdmin(database, request)
    }

    match /log/{document=**} {
      allow write: if isLoggedIn(request)
    }

    match /org/{document=**} {
      allow read: if true
      allow write: if hasRole(database, request, ["editor", "admin"])
    }

    match /poi/{document=**} {
      allow read: if true
      allow write: if hasRole(database, request, ["editor", "admin"])
    }

    match /users/{document=**} {
      allow read: if isOwner(request, resource) || hasRole(database, request, ["admin"])
      allow create: if isLoggedIn(request)
      allow update: if isOwner(request, resource) || hasRole(database, request, ["admin"]) 
    }

    match /users/{uid}/{document=**} {
      allow delete: if isOwner(request, resource)
    }

    match /nmsce/{document=**} {
      allow read: if true
      allow create: if isLoggedIn(request)
      allow update: if isOwner(request, resource) || checkFieldsCE(request,resource) 
      				|| checkAdminFieldsCE(database, request, resource, ["nmsceEditor", "admin"]) || isAdmin(database, request)
      allow delete: if isOwner(request, resource) || isAdmin(database, request)
    }
    
    match /{path=**}/votes/{document} {
      allow read: if true
    }
      
    match /{path=**}/nmsceCommon/{document} {
      allow read: if true
    }
      
    match /tags/{document=**} {
          allow read: if true
          allow write: if isLoggedIn(request)
		}

    match /nmsce/{col}/{what}/{type}/{doc=**} {
      allow read: if isLoggedIn(request)
      allow create: if isLoggedIn(request)
      allow update: if isOwner(request, resource) || isAdmin(database, request)
      allow delete: if isOwner(request, resource) || isAdmin(database, request)
    }
  }
}

function isLoggedIn(req) {
  return req.auth.uid != null
}

function isOwner(req, res) {
  return req.auth.uid == res.data.uid
}

function isUser(req, user){
	return req.auth.uid == user
}

function hasRole(db, req, roles) {
  return get(/databases/$(db)/documents/admin/$(req.auth.uid)).data.roles.hasAny(roles)
}

function isAdmin(db, req) {
  return get(/databases/$(db)/documents/admin/$(req.auth.uid)).data.roles.hasAny(["admin"]) &&
    get(/databases/$(db)/documents/users/$(req.auth.uid)).data.role == "admin"
}

// request.resource - future
// resource - existing
function checkFieldsBHS(req, res) {
  return req.resource.data.uid == res.data.uid &&
    req.resource.data._name == res.data._name &&
    req.resource.data.sys == res.data.sys &&
    req.resource.data.addr == res.data.addr &&
    ((req.resource.data.reg == res.data.reg || res.data.reg == "" && req.resource.data.reg != "") ||
		(req.resource.data.econ == res.data.econ || res.data.econ == "" && req.resource.data.econ != ""))
}

function checkFieldsCE(req, res) {
    return req.resource.data.uid == res.data.uid && req.resource.data._name == res.data._name &&
      (req.resource.data.votes.clickcount != res.data.votes.clickcount ||
      req.resource.data.votes.visited != res.data.votes.visited ||
      req.resource.data.votes.favorite != res.data.votes.favorite)
}

function checkAdminFieldsCE(db, req, res, roles) {
  return req.resource.data.uid == res.data.uid && req.resource.data._name == res.data._name &&
    (req.resource.data.votes.edchoice != res.data.votes.edchoice || 
    req.resource.data.votes.bhspoi != res.data.votes.bhspoi) &&
    get(/databases/$(db)/documents/admin/$(req.auth.uid)).data.roles.hasAny(roles)
}
